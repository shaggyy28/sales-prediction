Certainly! Here's an updated version of the Big Mart sales prediction project code with a login page added using Flask. This example includes user authentication and session management.

Step 1: Set up the project structure
Create a new directory for your project and navigate to it. Inside the project directory, create the following files and folders:

- `app.py` - the Flask application file
- `model.pkl` - the pre-trained machine learning model
- `templates/` - a folder to store HTML templates
- `data/` - a folder to store user login credentials


-----------------------------------------------------------------------

Step 2: Install the necessary packages
Ensure you have Python and pip installed. Then, install the required packages by running the following command in your terminal:


```shell
pip install flask scikit-learn pandas



----------------------------------------------------------------------
```

Step 3: Create the Flask application
In the `app.py` file, implement the Flask application with the necessary routes, user authentication, and session management. Here's the complete code:

```python
from flask import Flask, render_template, request, redirect, session
import joblib
import pandas as pd
import os

app = Flask(__name__)
app.secret_key = 'your_secret_key'

# Load the pre-trained model
model = joblib.load('model.pkl')

# Check if the user is logged in
def is_user_logged_in():
    return 'username' in session

@app.route('/')
def home():
    if is_user_logged_in():
        return redirect('/predict')
    else:
        return redirect('/login')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        # Verify user credentials
        if verify_user_credentials(username, password):
            session['username'] = username
            return redirect('/predict')
        else:
            return render_template('login.html', message='Invalid username or password')

    return render_template('login.html', message='')

@app.route('/logout')
def logout():
    session.pop('username', None)
    return redirect('/login')

# Verify user credentials
def verify_user_credentials(username, password):
    # Load user credentials from file
    user_credentials = load_user_credentials()

    # Check if the username exists and the password matches
    if username in user_credentials and user_credentials[username] == password:
        return True

    return False

# Load user credentials from file
def load_user_credentials():
    user_credentials = {}
    credentials_file = os.path.join('data', 'credentials.txt')

    if os.path.exists(credentials_file):
        with open(credentials_file, 'r') as file:
            for line in file:
                username, password = line.strip().split(',')
                user_credentials[username] = password

    return user_credentials

@app.route('/predict', methods=['GET', 'POST'])
def predict():
    if not is_user_logged_in():
        return redirect('/login')

    if request.method == 'POST':
        # Retrieve the input data from the form
        item_visibility = float(request.form['Item_Visibility'])
        item_weight = float(request.form['Item_Weight'])
        item_mrp = float(request.form['Item_MRP'])
        outlet_establishment_year = int(request.form['Outlet_Establishment_Year'])

        # Create a DataFrame with the input data
        input_data = pd.DataFrame([[item_visibility, item_weight, item_mrp, outlet_establishment_year]],
                                  columns=['Item_Visibility', 'Item_Weight', 'Item_MRP', 'Outlet_Establishment_Year'])

        # Use the model for prediction
        prediction = model.predict(input_data)

        # Return the prediction to the user
       

 return render_template('result.html', prediction=prediction)

    return render_template('predict.html')

if __name__ == '__main__':
    app.run(debug=True)
```---------------------------------------------------------------------------------------------------------



Step 4: Create HTML templates
Inside the `templates/` folder, create three HTML files: `login.html`, `predict.html`, and `result.html`. Here's the complete code for each file:

`login.html`:

```html
<!DOCTYPE html>
<html>
<head>
    <title>Login</title>
</head>
<body>
    <h1>Login</h1>
    <form action="/login" method="POST">
        <label for="username">Username:</label>
        <input type="text" id="username" name="username"><br><br>

        <label for="password">Password:</label>
        <input type="password" id="password" name="password"><br><br>

        <input type="submit" value="Login">
    </form>

    {% if message %}
        <p>{{ message }}</p>
    {% endif %}
</body>
</html>
```

`predict.html`:

```html
<!DOCTYPE html>
<html>
<head>
    <title>Big Mart Sales Prediction</title>
</head>
<body>
    <h1>Big Mart Sales Prediction</h1>
    <h3>Welcome, {{ session['username'] }}</h3>

    <form action="/predict" method="POST">
        <label for="item_visibility">Item Visibility:</label>
        <input type="text" id="item_visibility" name="Item_Visibility"><br><br>

        <label for="item_weight">Item Weight:</label>
        <input type="text" id="item_weight" name="Item_Weight"><br><br>

        <label for="item_mrp">Item MRP:</label>
        <input type="text" id="item_mrp" name="Item_MRP"><br><br>

        <label for="outlet_establishment_year">Outlet Establishment Year:</label>
        <input type="text" id="outlet_establishment_year" name="Outlet_Establishment_Year"><br><br>

        <input type="submit" value="Predict">
    </form>

    <br>
    <a href="/logout">Logout</a>
</body>
</html>
```
-------------------------------------------------------------------------------------------
`result.html`:

```html
<!DOCTYPE html>
<html>
<head>
    <title>Big Mart Sales Prediction - Result</title>
</head>
<body>
    <h1>Prediction Result</h1>
    <h3>Welcome, {{ session['username'] }}</h3>
    <br>
    <p>The predicted sales value is: {{ prediction }}</p>
    <br>
    <a href="/predict">Back to Prediction</a>
    <br><br>
    <a href="/logout">Logout</a>
</body>
</html>
--------------------------------------------------------------------------------------------------------------------```

Step 5: Prepare the pre-trained model and user credentials
In this example, we assume you have a pre-trained model saved as `model.pkl` and a file named `credentials.txt` inside the `data/` folder that contains the user login credentials in the format `username,password`. Create the `credentials.txt` file and add the login credentials as per your requirements.

Step 6: Run the application
In your terminal, navigate to the project directory and run the following command:

```shell
python app.py
```

This will start the Flask development server. You can now access the application by opening your browser and going to `http://localhost:5000`.

Please note that this is a simplified example, and you may need to modify and extend

 it based on your specific requirements, dataset, and machine learning algorithm. Additionally, in a production environment, it is recommended to use a secure method for storing user credentials, such as hashing and salting the passwords.

I hope this complete code example helps you with your Big Mart sales prediction project with a login page using Flask! Let me know if you have any further questions.